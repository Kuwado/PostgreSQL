---------------------CREATE TABLE--------------------

1.Tạo bảng countries bao gồm các cột sau country_id,country_name and region_id.

CREATE TABLE countries(
	country_id int,
	country_name varchar(30),
	region_id int
);

2. Tạo bảng countries chỉ khi chưa có bảng countries trong CSDL

3. Tạo bảng dup_countries chỉ có lược đồ tương tự như bảng countries.

CREATE TABLE dup_countries as 
	select * 
	from countries 
	where 1=0;

4. Tạo bảng dup_countries có lược đồ và dữ liệu giống như bảng countries.

CREATE TABLE dup_countries as 
	select * 
	from countries;

5. Tạo bảng countries có ràng buộc NOT NULL cho các thuộc tính.

CREATE TABLE countries(
	country_id int NOT NULL,
	country_name varchar(30) NOT NULL,
	region_id int NOT NULL
);

6. Tạo bảng jobs bao gồm các cột thuộc tính job_id, job_title, min_salary, max_salary và ràng buộc max_salary phải nhỏ hơn hoặc bằng 25000.

CREATE TABLE jobs (
	job_id int,
	job_title varchar(100),
	min_salary int,
	max_salary int,
CHECK (max_salary < 25000)
);

7. Tạo bảng countries bao gồm các cột country_id, country_name, region_id Và ràng buộc tên country_name phải là một trong các giá trị sau: Italy, India hay China.

CREATE TABLE countries(
	country_id int NOT NULL,
	country_name varchar(30) NOT NULL,
	region_id int NOT NULL,
	CHECK ( country_name = 'Italy' AND country_name = 'India' AND country_name = 'China' )
);

8. Tạo bảng job_histry gồm các cột employee_id, start_date, end_date, job_id, department_id và có ràng buộc end_date phải ở định dạng '--/--/----'.


CREATE TABLE job_history(
	employee_id int NOT NULL,
	start_date date NOT NULL,
	end_date varchar(10) NOT NULL,
	job_id int NOT NULL,
	department_id int NOT NULL,
	CHECK (end_date LIKE '__/__/____')
);

===> INSERT INTO job_history (employee_id, start_date, end_date, job_id, department_id)
VALUES (01, '2023/07/05', '06/07/2003', 123, 20215054),
(02, '2023/06/05', '07/05/2021', 456, 20215095);

9. Tạo bảng countries gồm các cột country_id, country_name, region_id và country_id có ràng buộc phải là duy nhất.

CREATE TABLE countries(
	country_id int UNIQUE,
	country_name varchar(30) NOT NULL,
	region_id int NOT NULL
);

10. Tạo bảng jobs gồm các cột job_id, job_title, min_salary, max_salary, với giá trị mặc định của job_title là ‘ ‘, min_salary là 8000, max_salary là NULL.

CREATE TABLE jobs(
	job_id int NOT NULL,
	job_title varchar(30) DEFAULT ' ',
	min_salary int DEFAULT 8000,
	max_salary int DEFAULT NULL 
);

11. Tạo bảng countries bao gồm các cột country_id, country_name, region_id với ràng buộc country_id là khóa.

CREATE TABLE countries(
	country_id int PRIMARY KEY,
	country_name varchar(30) NOT NULL,
	region_id int NOT NULL
);

12. Tạo bảng countries bao gồm các cột country_id, country_name, region_id với ràng buộc country_id là duy nhất và có giá trị tự động tăng khi INSERT.

CREATE TABLE countries(
	country_id serial UNIQUE,
	country_name varchar(30) NOT NULL,
	region_id int NOT NULL
);

===> INSERT INTO countries (country_name, region_id)
VALUES ('VietNam', 11001),
('Lao', 11002),
( 'CamPuChia', 11003);

13. Tạo bảng countries bao gồm các cột country_id, country_name, region_id và với khóa là cặp (country_id, region_id).

CREATE TABLE countries(
	country_id INT ,
	country_name VARCHAR(30) NOT NULL,
	region_id INT,
	PRIMARY KEY(country_id, region_id)
);

14. Tạo bảng job_history với các cột employee_id, start_date, end_date, job_id, department_id với khóa chính là employee_id và ràng buộc job_id phải là các giá trị tham chiếu được trong 
bảng jobs.

CREATE TABLE jobs(
	job_id int PRIMARY KEY,
	job_title varchar(30) DEFAULT ' ',
	min_salary int DEFAULT 8000,
	max_salary int DEFAULT NULL 
);

CREATE TABLE job_history(
	employee_id INT PRIMARY KEY,
	start_date DATE,
	end_date DATE,
	job_id INT ,
	FOREIGN KEY (job_id) REFERENCES jobs (job_id)
);

15. Tạo bảng employees gồm các cột employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission, manager_id, department_id với ràng buộc employee_id là 
khóa chính và cặp (department_id, manager_id) phải tồn tại trong bảng tham departments.

CREATE TABLE departments(
	department_id INT,
	manager_id INT,
	PRIMARY KEY( department_id, manager_id)
);

CREATE TABLE employee(
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(10),
	last_name VARCHAR(10),
	email VARCHAR(30),
	phone_number VARCHAR(15),
	hire_date DATE,
	job_id INT,
	salary INT,	
	commission VARCHAR(100),
	manager_id INT,
	department_id INT,
	FOREIGN KEY (department_id, manager_id) REFERENCES departments (department_id, manager_id)
);

16. Tạo bảng employees gồm các cột employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission, manager_id, department_id và ràng buộc khóa chính là 
employee_id, department_id là khóa ngoại tham chiếu tới khóa của bảng departments, job_id tham chiếu tới job_id trong bảng jobs.

CREATE TABLE jobs(
	job_id int PRIMARY KEY,
	job_title varchar(30) ,
	min_salary int ,
	max_salary int  
);

CREATE TABLE departments(
	department_id INT PRIMARY KEY,
	manager_id INT
);

CREATE TABLE employee(
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(10),
	last_name VARCHAR(10),
	email VARCHAR(30),
	phone_number VARCHAR(15),
	hire_date DATE,
	job_id INT,
	salary INT,	
	commission VARCHAR(100),
	manager_id INT,
	department_id INT,
	CONSTRAINT fk_department_id
	FOREIGN KEY (department_id) REFERENCES departments (department_id),
	CONSTRAINT fk_job_id
	FOREIGN KEY (job_id) REFERENCES jobs (job_id)
);

17. Như trên với ràng buộc ON UPDATE, ON DELETE RESTRICT cho job_id

CREATE TABLE jobs(
	job_id int PRIMARY KEY,
	job_title varchar(30) ,
	min_salary int ,
	max_salary int  
);

CREATE TABLE departments(
	department_id INT PRIMARY KEY,
	manager_id INT
);

CREATE TABLE employee(
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(10),
	last_name VARCHAR(10),
	email VARCHAR(30),
	phone_number VARCHAR(15),
	hire_date DATE,
	job_id INT,
	salary INT,	
	commission VARCHAR(100),
	manager_id INT,
	department_id INT,
	CONSTRAINT fk_department_id
	FOREIGN KEY (department_id) REFERENCES departments (department_id),
	CONSTRAINT fk_job_id
	FOREIGN KEY (job_id) REFERENCES jobs (job_id) ON UPDATE RESTRICT ON DELETE RESTRICT
);

18. Như trên với ràng buộc ON DELETE CASCADE, ON UPDATE RESTRICT. Kiểm tra hiệu ứng.

FOREIGN KEY (job_id) REFERENCES jobs (job_id) ON DELETE CASCADE ON UPDATE RESTRICT

DELETE FROM jobs 
WHERE job_id = 1000;

UPDATE jobs
SET job_id = 5
WHERE min_salary = 6;

19. Như trên với ràng buộc ON DELETE SET NULL, ON UPDATE SET NULL. Kiểm tra hiệu ứng.

FOREIGN KEY (job_id) REFERENCES jobs (job_id) ON DELETE SET NULL ON UPDATE SET NULL

20. Như trên với ràng buộc ON DELETE NO ACTION, ON UPDATE NO ACTION. Kiểm tra hiệu ứng.

FOREIGN KEY (job_id) REFERENCES jobs (job_id) ON DELETE NO ACTION ON UPDATE NO ACTION






















